name: services

networks:
  mv_net: {}

volumes:
  pgdata-auth: {}
  pgdata-products: {}
  pgdata-orders: {}
  pgdata-cart: {}
  pgdata-categories: {}
  pgdata-voice: {}

services:
  # ---------- POSTGRES POR SERVICIO ----------
  postgres-auth:
    image: postgres:16-alpine
    container_name: mv_postgres_auth
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
      POSTGRES_DB: auth_db
    # ports: ["5433:5432"]
    volumes:
      - pgdata-auth:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [mv_net]

  postgres-products:
    image: postgres:16-alpine
    container_name: mv_postgres_products
    environment:
      POSTGRES_USER: products_user
      POSTGRES_PASSWORD: products_pass
      POSTGRES_DB: products_db
    # ports: ["5434:5432"]
    volumes:
      - pgdata-products:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U products_user -d products_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [mv_net]

  postgres-orders:
    image: postgres:16-alpine
    container_name: mv_postgres_orders
    environment:
      POSTGRES_USER: orders_user
      POSTGRES_PASSWORD: orders_pass
      POSTGRES_DB: orders_db
    # ports: ["5435:5432"]
    volumes:
      - pgdata-orders:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d orders_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [mv_net]

  postgres-cart:
    image: postgres:16-alpine
    container_name: mv_postgres_cart
    environment:
      POSTGRES_USER: cart_user
      POSTGRES_PASSWORD: cart_pass
      POSTGRES_DB: cart_db
    # ports: ["5436:5432"]
    volumes:
      - pgdata-cart:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cart_user -d cart_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [mv_net]

  postgres-categories:
    image: postgres:16-alpine
    container_name: mv_postgres_categories
    environment:
      POSTGRES_USER: categories_user
      POSTGRES_PASSWORD: categories_pass
      POSTGRES_DB: categories_db
    # ports: ["5437:5432"]
    volumes:
      - pgdata-categories:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U categories_user -d categories_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [mv_net]

  postgres-voice:
    image: postgres:16-alpine
    container_name: mv_postgres_voice
    environment:
      POSTGRES_USER: voice_user
      POSTGRES_PASSWORD: voice_pass
      POSTGRES_DB: voice_db
    # ports: ["5438:5432"]
    volumes:
      - pgdata-voice:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voice_user -d voice_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [mv_net]

  # ---------- SERVICIOS ----------
  auth:
    build: ./auth
    container_name: auth_service
    env_file:
      - ./auth/.env
    environment:
      - PORT=3001
      - AUTH_GRPC_URL=0.0.0.0:50050
      - AUTH_PROTO_PATH=/app/proto/auth.proto    # ðŸ‘ˆ coincide con lo que copiamos
      - JWT_SECRET=${JWT_SECRET:-changeme}
    ports: ["3001:3001"]
    expose:
      - "50050"
    depends_on:
      postgres-auth:
        condition: service_healthy
    restart: unless-stopped
    networks: [mv_net]

  products:
    build: ./products
    container_name: products_service
    env_file:
      - ./products/.env
    environment:
      - PORT=3003
      - PRODUCTS_GRPC_URL=0.0.0.0:50051
      - AUTH_GRPC_URL=auth:50050
    ports: ["3003:3003"]
    expose:
      - "50051"
    depends_on:
      postgres-products:
        condition: service_healthy
      auth:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:'+ (process.env.PORT||'3003') +'/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks: [mv_net]

  orders:
    build: ./orders
    container_name: orders_service
    env_file:
      - ./orders/.env
    environment:
      - PORT=3002
      - ORDERS_GRPC_URL=0.0.0.0:50053
      - CART_GRPC_URL=cart:50052
      - PRODUCTS_GRPC_URL=products:50051
      - AUTH_GRPC_URL=auth:50050
    ports: ["3002:3002"]
    expose:
      - "50053"
    depends_on:
      postgres-orders:
        condition: service_healthy
      products:
        condition: service_started
      cart:
        condition: service_started
      auth:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:'+ (process.env.PORT||'3002') +'/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks: [mv_net]

  cart:
    build: ./cart
    container_name: cart_service
    env_file:
      - ./cart/.env
    environment:
      - PORT=3005
      - CART_GRPC_URL=0.0.0.0:50052
      - PRODUCTS_GRPC_URL=products:50051
      - AUTH_GRPC_URL=auth:50050
    ports: ["3005:3005"]
    expose:
      - "50052"
    depends_on:
      postgres-cart:
        condition: service_healthy
      auth:
        condition: service_started
      products:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:'+ (process.env.PORT||'3005') +'/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks: [mv_net]

  categories:
    build: ./categories
    container_name: categories_service
    env_file:
      - ./categories/.env
    environment:
      - PORT=3004
      - CATEGORIES_GRPC_URL=0.0.0.0:50054
      - AUTH_GRPC_URL=auth:50050
    ports: ["3004:3004"]
    expose:
      - "50054"
    depends_on:
      postgres-categories:
        condition: service_healthy
      auth:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:'+ (process.env.PORT||'3004') +'/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks: [mv_net]

  voice:
    build: ./voice
    container_name: voice_service
    env_file:
      - ./voice/.env
    environment:
      - PORT=3006
      - VOICE_GRPC_URL=0.0.0.0:50055
      - AUTH_GRPC_URL=auth:50050
    ports: ["3006:3006"]
    expose:
      - "50055"
    depends_on:
      postgres-voice:
        condition: service_healthy
      auth:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"require('http').get('http://localhost:'+ (process.env.PORT||'3006') +'/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks: [mv_net]
